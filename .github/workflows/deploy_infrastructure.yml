name: Deploy Infrastructure

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'terraform/**'
      - '/.github/workflows/deploy_infrastructure.yml'
      - '/.github/workflows/on_pull_request.yml'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - prod

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "environment=beta" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "action=apply" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "action=apply" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ steps.env.outputs.environment }}" \
            -out=tfplan \
            -lock=false 
#            -no-color
        continue-on-error: true
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = `${{ steps.plan.outputs.stdout }}`;
            
            const output = `## Terraform Plan - ${{ steps.env.outputs.environment }}
            
            #### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan -lock=false \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan.substring(0, 60000)}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ steps.env.outputs.environment }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      
      - name: Terraform Apply
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch')
        working-directory: ./terraform
        run: |
          terraform apply -lock=false \
            -var="environment=${{ steps.env.outputs.environment }}" \
            -auto-approve
            tfplan
      
      - name: Output Terraform Values
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch')
        working-directory: ./terraform
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "**\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY
      
      - name: Save GitHub Secrets Setup
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch')
        working-directory: ./terraform
        run: |
          echo "## GitHub Secrets Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Add these to your GitHub repository secrets:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- AWS_ACCESS_KEY_ID: (from Terraform output - sensitive)" >> $GITHUB_STEP_SUMMARY
          echo "- AWS_SECRET_ACCESS_KEY: (from Terraform output - sensitive)" >> $GITHUB_STEP_SUMMARY
          echo "- AWS_REGION: $(terraform output -raw aws_region || echo '${{ secrets.AWS_REGION }}')" >> $GITHUB_STEP_SUMMARY
          echo "- S3_BUCKET: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "- DYNAMODB_TABLE_BETA: $(terraform output -raw dynamodb_beta_table_name)" >> $GITHUB_STEP_SUMMARY
          echo "- DYNAMODB_TABLE_PROD: $(terraform output -raw dynamodb_prod_table_name)" >> $GITHUB_STEP_SUMMARY